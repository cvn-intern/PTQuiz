generator dbml {
    provider = "prisma-dbml-generator"
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Role {
    id    String @id @default(cuid())
    title String

    internalUsers InternalUser[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InternalUser {
    id        String  @id @default(cuid())
    roleId    String
    username  String
    name      String?
    password  String
    email     String
    avatarUrl String
    token     String
    isLogin   Boolean
    PIN       String

    rooms              Room[]
    role               Role               @relation(fields: [roleId], references: [id])
    quizzes            Quizz[]
    tags               Tag[]
    questionCategories QuestionCategory[]
    answerCategories   AnswerCategory[]
    quizzSets          QuizzSet[]
    multiPlayerGames   MultiPlayerGame[]
    singlePlayerGames  SinglePlayerGame[]
    histories          History[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ExternalUser {
    id    String @id @default(cuid())
    name  String
    token String

    room      Room?    @relation(fields: [roomId], references: [id])
    roomId    String?
    history   History? @relation(fields: [historyId], references: [id])
    historyId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Quizz {
    id                 String   @id @default(cuid())
    userId             String // owner
    tagId              String
    questionCategoryId String
    answerCategoryId   String
    time               Int
    content            String
    quizzSetId         String
    answers            Answer[]

    user             InternalUser     @relation(fields: [userId], references: [id]) // owner
    tag              Tag              @relation(fields: [tagId], references: [id])
    categoryQuestion QuestionCategory @relation(fields: [questionCategoryId], references: [id])
    answerCategory   AnswerCategory   @relation(fields: [answerCategoryId], references: [id])
    quizzSet         QuizzSet         @relation(fields: [quizzSetId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id     String @id @default(cuid())
    userId String // owner
    title  String

    user    InternalUser @relation(fields: [userId], references: [id])
    quizzes Quizz[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model QuestionCategory {
    id     String @id @default(cuid())
    userId String // owner
    title  String

    user    InternalUser @relation(fields: [userId], references: [id])
    quizzes Quizz[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AnswerCategory {
    id     String @id @default(cuid())
    userId String // owner
    title  String

    user    InternalUser @relation(fields: [userId], references: [id])
    quizzes Quizz[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Answer {
    id        String  @id @default(cuid())
    quizzId   String
    content   String
    isCorrect Boolean

    quizz Quizz @relation(fields: [quizzId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model QuizzSet {
    id                String             @id @default(cuid())
    userId            String // owner
    type              String
    quizId            String
    isShared          Boolean
    quizzes           Quizz[]
    multiPlayerGames  MultiPlayerGame[]
    singlePlayerGames SinglePlayerGame[]

    User InternalUser @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MultiPlayerGame {
    id         String  @id @default(cuid())
    userId     String
    roomId     String
    url        String
    token      String
    isLock     Boolean
    quizzSetId String

    quizzSet QuizzSet     @relation(fields: [quizzSetId], references: [id])
    user     InternalUser @relation(fields: [userId], references: [id]) // host
    history  History?
    room     Room?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SinglePlayerGame {
    id                         String  @id @default(cuid())
    userId                     String
    quizzSetId                 String
    url                        String
    token                      String
    isLock                     Boolean
    singlePlayerGameCategoryId String

    quizzSet QuizzSet     @relation(fields: [quizzSetId], references: [id])
    user     InternalUser @relation(fields: [userId], references: [id]) // host

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    singlePlayerGameCategory SinglePlayerGameCategory @relation(fields: [singlePlayerGameCategoryId], references: [id])
}

model SinglePlayerGameCategory {
    id    String @id @default(cuid())
    title String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    singlePlayerGames SinglePlayerGame[]
}

model Room {
    id                String          @id @default(cuid())
    multiPlayergameId String          @unique
    internalUsers     InternalUser[]
    externalUsers     ExternalUser[]
    multiPlayergame   MultiPlayerGame @relation(fields: [multiPlayergameId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model History {
    id                String @id @default(cuid())
    multiPlayergameId String @unique
    userId          String

    externalUsers ExternalUser[]
    user            InternalUser    @relation(fields: [userId], references: [id])
    multiPlayergame MultiPlayerGame @relation(fields: [multiPlayergameId], references: [id])
    ranks           Rank[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Rank {
    id        String @id @default(cuid())
    historyId String
    username  String
    top       Int
    score     Int

    history History @relation(fields: [historyId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
